Change log 1.1 (under development)
----------------------------------
* Only signed classes are loaded by the signed supporting CGLib naming policy.
* Whitebox.invokeConstructor now propagates InvocationTargetExceptions correctly.
* Restructured release assemblies to include just the correct things.
* Set sources:jar and javadocs:jar to run on every build.
* LoggerTest now creates its test log file in ./target/ directory instead of ./
* Major refactoring of project structure, it's now be possible to use PowerMock as a foundation for testability for other mock frameworks.
* Fixed a serious issue with the classloading hierarchy of PowerMock's JUnit runners.
* Implemented support for PowerMock test listeners, to create a listener you need to implement the org.powermock.core.spi.PowerMockTestListener interface and pass the implementation class to the PowerMockListener annotation.
* Started Mockito integration. It supports final, static (non-void) and partial mocking using the PowerMock Mockito API. It also supports the Mockito annotations if using the @PowerMockListener(AnnotationEnabler.class) at the class-level of the test case.
* Added a new Mock annotation which can be placed on fields to allow for a PowerMock listener to create and inject mock objects. Use the AnnotationEnabler listener from the EasyMock or Mockito API.
* Exceptions are no longer wrapped in run-time exceptions when invoking a method using Whitebox.invokeMethod(..).
* Major refactoring of the classloader structure and delegation.
* Added two now methods to the Whitebox API, both called getAllFields. One takes an object as parameter and one takes a class. They return all instance/class fields of the object/class. 
* Added a FieldDefaulter test listeners that set all instance field to their default value after each test method. This listener can be used to automatically set all instances to null after each test method instead of doing so manually in a tearDown method.
* Added three new methods to the PowerMock API, reset(Object...mocks), reset(Class<?>...classMocks) and resetAll(). The methods can be used to reset instance mocks, class mocks or let PowerMock reset all mocks automatically.
* mockStaticNice(Class<?> clazz, String... methodNames) was renamed to mockStaticPartialNice in the PowerMock API.
* PowerMock and PowerMockito now _really_ follows the EasyMock semantics for partial mocking (e.g. PowerMock.createMock(MyClass.class, null) now mocks all methods of a class whereas PowerMock.createMock(MyClass.class, new Method[0]) mocks no methods of a class).
* The @PrepareForTest annotation now accepts interfaces as types. This is useful in situations where you wan't to make sure that a certain interface is loaded by the same classloader as the rest of the mocks.
* Updated the tutorial projects to reflect the latest changes in PowerMock.
* Errors are propagated correctly when invoking the PowerMock.replay(..) method (i.e. they are no longer wrapped in run-time exceptions).
* Added a MockNice and MockStrict annotation which can be placed on fields to allow for the AnnotationEnabler of the EasyMock api to create and inject mock objects.
* Changed so that the default suppression value for methods returning java.lang.String is null to conform with EasyMock and Mockito.
* Added Whitebox.getFieldsOfType(..) that can be used to retreive all fields of a particular type in a class hierarchy.
* Added support for mock policies. A mock policy can be used to make it easier to unit test some code with PowerMock in isolation from a certain framework. Three mock policies are available in the EasyMock API, JclMockPolicy, Slf4jMockPolicy and Log4jMockPolicy which helps with mocking java commons-lang, log4j or slf4j in PowerMock. Use the @MockPolicy annotation at the class-level of the test case to use one of the mock policies.
* Whitebox.getMethod(..) sets the accessable flag to true if a method is found.
* Added Whitebox.getMethod(Class<?> type, Class<?>... parameterTypes) that let's you get a single method without specifying the method name.
* Fixed a bug in WhiteboxImpl.checkIfTypesAreSame(..) that prevented classes to be identified correctly.
* Fixed a bug in the PowerMockJUnit44RunnerDelegateImpl that caused a NoClassDefFoundError to be thrown when using JUnit 4.5 when a AssumptionViolatedException was thrown. The reason for this was that JUnit has changed to locatation of this exception.
* Added spy functionality of final classes and methods to the Mockito API (experimental).
* Fixed so that it works to place the PrepareForTest annotation at methods without specifying it at the class-level first.

Change log 1.0 (released 2008-11-18)
------------------------------------
* Changed the pom.xml for the tutorial project so that it's now a stand-alone project.
* Fixed so that replay all and verify all also works for createMockAndExpectNew.
* Added method createStrictMockAndExpectNew and createNiceMockAndExpectNew
* Fixed so that suppressMethodCode returns an empty string for methods returning String. 
* Fixed a bug in the byte-code manipulation of constructors, modifiers that doesn't need change are now preserved.
* Added the PrepareEverythingForTestAnnotation, this annotation can be used to tell PowerMock to modify all classes.
* MockGateway doMethodCall now also supports java proxy types.
* Implemented the ability to set and get internal state based on field type. This means that you get more refactor friendly code while still being able to set or get internal state.
* Implemented the ability to set internal state based on an object type, i.e. you can now do setInternalState(object, myServiceImpl) to set the first field in object which can be assignable to myServiceImpl. This means that you get more refactor friendly code while still being able to set internal state.
* Get and setInternalState now separates between class and instance fields, i.e. you cannot set static fields by specifying an instance object.
* Updated the tutorial projects to take advantage of the latest features in PowerMock.
* Fixed a NPE bug in the AbstractTestClassExtractor.isPrepared(..) method.
* The test class is no longer recommended as a PrepareForTest candidate if a NPE occurs inside the test class.
* Added createStrictPartialMockForAllMethodsExcept and createNicePartialMockForAllMethodsExcept to the PowerMock API.
* The Whitebox API method getAllMethodExcept now traverses the class hierarchy looking for methods.
* Fixed a bug in the verifyAll method of the PowerMock API, the state is now properly disposed.
* Verify now only clears state of the artifact being verified, this means that you use sequential verify statements again. However you must always use a PowerMockRunner in order to make sure that the full state is properly disposed.
* The suppressConstructorCode method of the PowerMock API was renamed to suppressConstructor.
* The suppressMethodCode method of the PowerMock API was renamed to suppressMethod. 
* The suppressConstructorCodeHierarchy method of the PowerMock API was removed, suppressConstructor(..) automatically suppress the full hierarchy so use this method instead.
* Added the PowerMockIgnore annotation that can be used to specify packages or classes that should not be loaded by PowerMock's classloader.
* Fixed a bug in MockGateway that prevented wrapper/primitive constructors from being correctly executed.
* Added support for specifying parameter types for expectNew and createMockAndExpectNew, createNiceMockAndExpectNew, createStrictMockAndExpectNew.
* Added expectNiceNew and expectStrictNew, expectNiceNew can be used with no parameters.
* Internal refactoring of the chunking mechanism
* Fixed a bug in the chunking algorithm that made the test listener clear state for all class loaders even though it should only clear the state for the last one. Fixed this for JUnit4 and JUnit3.

Change log 0.9 (released 2008-11-10)
------------------------------------
* Structural refactoring to remove Structure 101 XS: moved WhiteBox implementation to separate class in core and moved IndicateReloadClass
* By default Whitebox.getInternalState and Whitebox.setInternalState now traverses the class hierarchy when looking for a field.
* Better error message if a NPE is caught in a subclass of a class being prepared for test.
* The PrepareForTest annotation now manipulates the full (super) class hierachy by default. This makes it easier to perform mocking of super class methods.
* A new annotation called PrepareOnlyThisForTest has been added and works in the same way that PrepareForTest previously did, i.e. ONLY the specified classes are prepared and not the entire hierarchy.
* Fixed a bug that made it impossible to invoke vararg constructors.
* createMockAndExpectNew now takes expected arguments as the second parameter.
* expectNew takes expected arguments as the second parameter.
* Invocations of var arg methods, constructors and expectPrivate now works for sub-types of the declared parameter types.
* More consistent error messages when expectNew fails. Error messages now takes the parameters into account.
* Renamed mockStaticMethodX to mockStaticPartialX
* Added javadoc to the release phase
* The JUnit4 legacy runner now throws NoTestsRemainException if no tests are found in the test case. 
* All JUnit4 runners now executes the setUp method before each test and the tearDown method after each test if the test class extends from TestCase.
* Fixed an issue in the getAllChunkEntries method of the AbstractTestSuiteChunkerImpl class that caused test methods to be executed in a different order when running in a test suite than running the test stand alone.
* Fixed a serious issue when the suppress static constructor state disappeared between chunking sessions. Fixed this for all versions of JUnit 4. This means that chunking and suppression of static initializers now work as expected.
* The PowerMock API methods with a syntax like createPartialMockX are renamed to createXPartialMock, e.g. createPartialMockNice is renamed to createNicePartialMock to be more consistent with the normal createMock methods.
* Added createNicePartialMockAndInvokeDefaultConstructor and createStrictPartialMockAndInvokeDefaultConstructor to the PowerMock API.
* Updated the tutorial projects with TODO's. It should now be much easier to understand what shall be done.
* Changed the clean-up mechanisms of PowerMock.replay(..) and PowerMock.verify(..). Should no longer clear unnecessary state.
* Implemented two new PowerMock API methods: replayAll and verifyAll(). These can be used to replay and verify all classes and mocks created by the PowerMock API without having to explicitly specify each and everyone.

Change log 0.8.5 (releasd 2008-10-30)
-------------------------------------
* Fixed so that it's now possible to mock abstract methods
* WhiteBox.getMethod(..) now also returns protected and package-private methods.
* Whitebox.invokeMethod can now execute methods in a super class.
* Whitebox.invokeMethod no longer throws NullPointerException when an argument is null when the method cannot be found
* It's is now possible to use sub-types of method parameters when using Whitebox.invokeMethod.
* Tests methods starting with "test" are now executed only if the method is annotated with @Test or if the test class extends from TestCase.
* Tests are now executed in the order that they are defined in the test case.
                                                                            
Change log 0.8.1 (released 2008-10-26)
--------------------------------------
* Added PowerMock API method "createPartialMockAndInvokeDefaultConstructor" that invokes a default constructor after mock creation (even if it's private).
* createPartialMock now works as expected
* Fixed so that it works to mock package private classes (even if they're signed)
* It now works to set a static final field after the static initializes have been suppressed.
* Fixed a serious bug that caused classes extending java.lang.Object to be non-mockable.
                                                                                           
Change log 0.8 (released 2008-10-22)
-----------------------------------
* The junit4 test module now work with JUnit 4.5 (although using the old, now deprecated, approach of JUnit 4.4).
* Upgraded to EasyMock 2.4
* Upgraded to JavaAssist 3.8.0.GA
* WhiteBox invoke method and invoke constructor methods now throws an IllegalArgumentException if the first argument is null.
* Replay/verify works as expected when mixing classes and instance mocks.
* Better error message when expectNew fails due to too few calls to new when a method was invoked using reflection.
* Implemented support for nice mocks.
* Added more documentation
* expectNew(..).andThrow(..) now works with checked exceptions
* Added WhiteBox functionality to instantiate a class without invoking its constructor without using byte-code manipulation. Works in multiple JVM's.
* mockMethodX is renamed to createPartialMockX        
* Fixed the error message that was thrown when a constructor was not found when using mocks as arguments with createPartialMock.
* Suppress constructor code now works as expected
* mockConstruction(..) was removed. You should always use expectNew(..) instead. There's a utility method in PowerMock called createMockAndExpectNew that can be used as a substitute for mockConstruction(..). 
* Better error message when a class is not replayed when doing expectNew.
* Added support to easy suppress several methods in the same class.
* doInvokeMethod in PowerMock now catches and deals correctly with InvocationTargetExceptions.
* It's now possible to run a single test case in junit4
* Test delegates now implements Sortable
* Added support for mocking classes in signed jar files
* EasyMock matchers now works in combination with PowerMock's expectPrivate(..)
* Added support for invoking var args constructors and methods using Whitebox
* Added support for expecting private methods with var args parameter
* PowerMock now supports Hamcrest matchers
* Exceptions are now propagated correctly from the junit runners.
                             
Change log 0.7 (released)
-------------------------
* Do not mock hashCode and equals
* Added ugly hack for cglib classloading issue with maven
* Fixed problems with mocking methods in superclass and modifying multiple classes with same parent
* Strict mocking with interface work as expected
* Added niceReplayAndVerify
* Added logo and improved documentation structure
* Follow EasyMock semantics for partial mocking
* WhiteBox internalstate support for static fields as expected
* Updated assembly and create sources jar files

Change log 0.6 (released)
-------------------------
* Updated to EasyMock 2.3 and classextension 2.3
* Implemented support for ConstructorArgs
* Implemented support for StrictMock
* Added possibility to invoke a private method in a subclass of an instance using Whitebox.
* Added a support for test classes extending from TestCase when using a custom JUnit runner such as PowerMockRunner. This fix was created for both JUnit4 legacy and JUnit 4.4. 
* Major internal refactoring.
* Fixed major classloading and byte-code manipulation issues. Code coverage tools such as EMMA now works.
* Fixed so that it's now possible to invoke private methods using non-primitive and/or non-wrapper values.
* Whitebox now throws the correct exceptions to the client and not a wrapped RuntimeException. This means for example that expectNew(..).andThrow(..) works as expected.
* Fixed a bug in the PowerMock JUnit 4.4 and legacy runner that reported back the wrong number of tests being executed when @Ignore was used. 
